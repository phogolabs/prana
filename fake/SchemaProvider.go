// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/prana/sqlmodel"
)

type SchemaProvider struct {
	TablesStub        func(schema string) ([]string, error)
	tablesMutex       sync.RWMutex
	tablesArgsForCall []struct {
		schema string
	}
	tablesReturns struct {
		result1 []string
		result2 error
	}
	tablesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	SchemaStub        func(schema string, tables ...string) (*sqlmodel.Schema, error)
	schemaMutex       sync.RWMutex
	schemaArgsForCall []struct {
		schema string
		tables []string
	}
	schemaReturns struct {
		result1 *sqlmodel.Schema
		result2 error
	}
	schemaReturnsOnCall map[int]struct {
		result1 *sqlmodel.Schema
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SchemaProvider) Tables(schema string) ([]string, error) {
	fake.tablesMutex.Lock()
	ret, specificReturn := fake.tablesReturnsOnCall[len(fake.tablesArgsForCall)]
	fake.tablesArgsForCall = append(fake.tablesArgsForCall, struct {
		schema string
	}{schema})
	fake.recordInvocation("Tables", []interface{}{schema})
	fake.tablesMutex.Unlock()
	if fake.TablesStub != nil {
		return fake.TablesStub(schema)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tablesReturns.result1, fake.tablesReturns.result2
}

func (fake *SchemaProvider) TablesCallCount() int {
	fake.tablesMutex.RLock()
	defer fake.tablesMutex.RUnlock()
	return len(fake.tablesArgsForCall)
}

func (fake *SchemaProvider) TablesArgsForCall(i int) string {
	fake.tablesMutex.RLock()
	defer fake.tablesMutex.RUnlock()
	return fake.tablesArgsForCall[i].schema
}

func (fake *SchemaProvider) TablesReturns(result1 []string, result2 error) {
	fake.TablesStub = nil
	fake.tablesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *SchemaProvider) TablesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.TablesStub = nil
	if fake.tablesReturnsOnCall == nil {
		fake.tablesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.tablesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *SchemaProvider) Schema(schema string, tables ...string) (*sqlmodel.Schema, error) {
	fake.schemaMutex.Lock()
	ret, specificReturn := fake.schemaReturnsOnCall[len(fake.schemaArgsForCall)]
	fake.schemaArgsForCall = append(fake.schemaArgsForCall, struct {
		schema string
		tables []string
	}{schema, tables})
	fake.recordInvocation("Schema", []interface{}{schema, tables})
	fake.schemaMutex.Unlock()
	if fake.SchemaStub != nil {
		return fake.SchemaStub(schema, tables...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.schemaReturns.result1, fake.schemaReturns.result2
}

func (fake *SchemaProvider) SchemaCallCount() int {
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	return len(fake.schemaArgsForCall)
}

func (fake *SchemaProvider) SchemaArgsForCall(i int) (string, []string) {
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	return fake.schemaArgsForCall[i].schema, fake.schemaArgsForCall[i].tables
}

func (fake *SchemaProvider) SchemaReturns(result1 *sqlmodel.Schema, result2 error) {
	fake.SchemaStub = nil
	fake.schemaReturns = struct {
		result1 *sqlmodel.Schema
		result2 error
	}{result1, result2}
}

func (fake *SchemaProvider) SchemaReturnsOnCall(i int, result1 *sqlmodel.Schema, result2 error) {
	fake.SchemaStub = nil
	if fake.schemaReturnsOnCall == nil {
		fake.schemaReturnsOnCall = make(map[int]struct {
			result1 *sqlmodel.Schema
			result2 error
		})
	}
	fake.schemaReturnsOnCall[i] = struct {
		result1 *sqlmodel.Schema
		result2 error
	}{result1, result2}
}

func (fake *SchemaProvider) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *SchemaProvider) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *SchemaProvider) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *SchemaProvider) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SchemaProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tablesMutex.RLock()
	defer fake.tablesMutex.RUnlock()
	fake.schemaMutex.RLock()
	defer fake.schemaMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SchemaProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmodel.SchemaProvider = new(SchemaProvider)
