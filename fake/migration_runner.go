// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/prana/sqlmigr"
)

type MigrationRunner struct {
	RevertStub        func(*sqlmigr.Migration) error
	revertMutex       sync.RWMutex
	revertArgsForCall []struct {
		arg1 *sqlmigr.Migration
	}
	revertReturns struct {
		result1 error
	}
	revertReturnsOnCall map[int]struct {
		result1 error
	}
	RunStub        func(*sqlmigr.Migration) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 *sqlmigr.Migration
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MigrationRunner) Revert(arg1 *sqlmigr.Migration) error {
	fake.revertMutex.Lock()
	ret, specificReturn := fake.revertReturnsOnCall[len(fake.revertArgsForCall)]
	fake.revertArgsForCall = append(fake.revertArgsForCall, struct {
		arg1 *sqlmigr.Migration
	}{arg1})
	fake.recordInvocation("Revert", []interface{}{arg1})
	fake.revertMutex.Unlock()
	if fake.RevertStub != nil {
		return fake.RevertStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.revertReturns
	return fakeReturns.result1
}

func (fake *MigrationRunner) RevertCallCount() int {
	fake.revertMutex.RLock()
	defer fake.revertMutex.RUnlock()
	return len(fake.revertArgsForCall)
}

func (fake *MigrationRunner) RevertCalls(stub func(*sqlmigr.Migration) error) {
	fake.revertMutex.Lock()
	defer fake.revertMutex.Unlock()
	fake.RevertStub = stub
}

func (fake *MigrationRunner) RevertArgsForCall(i int) *sqlmigr.Migration {
	fake.revertMutex.RLock()
	defer fake.revertMutex.RUnlock()
	argsForCall := fake.revertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MigrationRunner) RevertReturns(result1 error) {
	fake.revertMutex.Lock()
	defer fake.revertMutex.Unlock()
	fake.RevertStub = nil
	fake.revertReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationRunner) RevertReturnsOnCall(i int, result1 error) {
	fake.revertMutex.Lock()
	defer fake.revertMutex.Unlock()
	fake.RevertStub = nil
	if fake.revertReturnsOnCall == nil {
		fake.revertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.revertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MigrationRunner) Run(arg1 *sqlmigr.Migration) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 *sqlmigr.Migration
	}{arg1})
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runReturns
	return fakeReturns.result1
}

func (fake *MigrationRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *MigrationRunner) RunCalls(stub func(*sqlmigr.Migration) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *MigrationRunner) RunArgsForCall(i int) *sqlmigr.Migration {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MigrationRunner) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationRunner) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MigrationRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.revertMutex.RLock()
	defer fake.revertMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MigrationRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmigr.MigrationRunner = new(MigrationRunner)
