// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/prana/sqlmodel"
)

type TagBuilder struct {
	BuildStub        func(column *sqlmodel.Column) string
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		column *sqlmodel.Column
	}
	buildReturns struct {
		result1 string
	}
	buildReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TagBuilder) Build(column *sqlmodel.Column) string {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		column *sqlmodel.Column
	}{column})
	fake.recordInvocation("Build", []interface{}{column})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(column)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildReturns.result1
}

func (fake *TagBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *TagBuilder) BuildArgsForCall(i int) *sqlmodel.Column {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].column
}

func (fake *TagBuilder) BuildReturns(result1 string) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 string
	}{result1}
}

func (fake *TagBuilder) BuildReturnsOnCall(i int, result1 string) {
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *TagBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TagBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlmodel.TagBuilder = new(TagBuilder)
