{{#if Schema.Model.HasDocumentation}}
// Code generated by prana; DO NOT EDIT.

// Package {{Meta.RepositoryPackage}}_tests contains a tests for database repository
// Auto-generated at {{now}}

{{/if}}
package {{Meta.RepositoryPackage}}_test

import (
	"database/sql"

	"github.com/phogolabs/orm"
	"github.com/phogolabs/schema"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)
{{#Schema}}
{{#tables}}

var _ = Describe("{{Model.Type}}Repository", func() {
	var (
	    repository *database.{{Model.Type}}Repository
	    entity     *{{Model.Package}}.{{Model.Type}}
	)

	BeforeEach(func() {
		repository = &database.{{Model.Type}}Repository{
			Gateway: gateway,
		}

		entity = &{{Model.Package}}.{{Model.Type}}{
			//TODO: set the required fields
		}
	})

	AfterEach(func() {
		_, err := gateway.Exec(orm.SQL("DELETE FROM {{Name}}"))
		Expect(err).NotTo(HaveOccurred())
	})

	Describe("SelectAll", func() {
		It("returns no records", func() {
			records, err := repository.SelectAll()
			Expect(err).NotTo(HaveOccurred())
			Expect(records).To(BeEmpty())
		})

		Context("when there is a record", func() {
			BeforeEach(func() {
				Expect(repository.Insert(entity)).To(Succeed())
			})

			It("returns all records", func() {
				records, err := repository.SelectAll()
				Expect(err).NotTo(HaveOccurred())
				Expect(records).To(HaveLen(1))
				Expect(records[0]).To(Equal(entity))
			})
		})
	})

	Describe("SelectByPK", func() {
		It("return a record by primary key", func() {
			Expect(repository.Insert(entity)).To(Succeed())

			record, err := repository.SelectByPK({{Model.PrimaryKeyEntityParams}})
			Expect(err).NotTo(HaveOccurred())
			Expect(record).To(Equal(entity))
		})

		Context("when the record does not exist", func() {
			It("returns an error", func() {
        record, err := repository.SelectByPK({{Model.PrimaryKeyEntityParams}})
				Expect(err).To(Equal(sql.ErrNoRows))
				Expect(record).To(BeNil())
			})
		})
	})

	Describe("SearchAll", func() {
		It("returns all records for given RQL", func() {
			Expect(repository.Insert(entity)).To(Succeed())

			records, err := repository.SearchAll(&orm.RQLQuery{})
			Expect(err).NotTo(HaveOccurred())
			Expect(records).To(HaveLen(1))
			Expect(records[0]).To(Equal(entity))
		})
	})

	Describe("Insert", func() {
		It("inserts a new member successfully", func() {
			Expect(repository.Insert(entity)).To(Succeed())

			record, err := repository.SelectByPK({{Model.PrimaryKeyEntityParams}})
			Expect(err).NotTo(HaveOccurred())
			Expect(record).To(Equal(entity))
		})
	})

	Describe("UpdateByPK", func() {
		BeforeEach(func() {
			Expect(repository.Insert(entity)).To(Succeed())
		})

		It("updates a record by primary key", func() {
			Expect(repository.UpdateByPK(entity)).To(Succeed())

			record, err := repository.SelectByPK({{Model.PrimaryKeyEntityParams}})
			Expect(err).NotTo(HaveOccurred())
			Expect(record).To(Equal(entity))
		})
	})

	Describe("DeleteByPK", func() {
		BeforeEach(func() {
			Expect(repository.Insert(entity)).To(Succeed())
		})

		It("deletes a record by primary key", func() {
			Expect(repository.DeleteByPK({{Model.PrimaryKeyEntityParams}})).To(Succeed())

			record, err := repository.SelectByPK({{Model.PrimaryKeyEntityParams}})
			Expect(err).To(Equal(sql.ErrNoRows))
			Expect(record).To(BeNil())
		})
	})
})
{{/tables}}
{{/Schema}}
