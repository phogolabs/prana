package model

import "context"

type Table1Repository struct {
	// Gateway connects the repository to the underlying database
	Gateway *orm.Gateway
}

func (r *Table1Repository) SelectAll(ctx context.Context) ([]*model.Table1, error) {
	records := []*model.Table1{}
	routine := orm.Routine("select-all-table1")

	if err := r.Gateway.All(ctx, &records, routine); err != nil {
		return nil, err
	}

	return records, nil
}

func (r *Table1Repository) SelectByPK(ctx context.Context, id string) (*model.Table1, error) {
	param := orm.Map{
		"id": id,
	}

	routine := orm.Routine("select-table1-by-pk", param)
	record := &model.Table1{}

	if err := r.Gateway.Only(ctx, record, routine); err != nil {
		return nil, err
	}

	return record, nil
}

func (r *Table1Repository) Insert(ctx context.Context, row *model.Table1) error {
	routine := orm.Routine("insert-table1", row)
	_, err := r.Gateway.Exec(ctx, routine)
	return err
}

func (r *Table1Repository) UpdateByPK(ctx context.Context, row *model.Table1) error {
	routine := orm.Routine("update-table1-by-pk", row)
	_, err := r.Gateway.Exec(ctx, routine)
	return err
}

func (r *Table1Repository) DeleteByPK(ctx context.Context, id string) error {
	param := orm.Map{
		"id": id,
	}

	routine := orm.Routine("delete-table1-by-pk", param)
	_, err := r.Gateway.Exec(ctx, routine)
	return err
}
